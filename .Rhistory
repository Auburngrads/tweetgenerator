visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.1,
springLength=95,
springConstant=0.10,
damping=0.1,
avoidOverlap=1
),
stabilization=T)
}
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,500,T,T)
plot_commorbidity<-function(my_igraph,layout,size_by,min_size,max_size,physics,smooth) {
if(size_by=="betweenness"){
V(my_igraph)$size<-betweenness(my_igraph)
print("betweenness")
} else {
print("no")
V(my_igraph)$size<-degree(my_igraph)
}
V(my_igraph)$size[V(my_igraph)$size<min_size]<-min_size
V(my_igraph)$size[V(my_igraph)$size>max_size]<-max_size
visIgraph(my_igraph, layout=layout, physics=physics, smooth=smooth) %>%
visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.1,
springLength=95,
springConstant=0.05,
damping=0.1,
avoidOverlap=1
),
stabilization=T)
}
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,500,T,T)
plot_commorbidity<-function(my_igraph,layout,size_by,min_size,max_size,physics,smooth) {
if(size_by=="betweenness"){
V(my_igraph)$size<-betweenness(my_igraph)
print("betweenness")
} else {
print("no")
V(my_igraph)$size<-degree(my_igraph)
}
V(my_igraph)$size[V(my_igraph)$size<min_size]<-min_size
V(my_igraph)$size[V(my_igraph)$size>max_size]<-max_size
visIgraph(my_igraph, layout=layout, physics=physics, smooth=smooth) %>%
visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.1,
springLength=95,
springConstant=0.05,
damping=0.1,
avoidOverlap=1
),
stabilization=T)
}
plot_commorbidity<-function(my_igraph,layout,size_by,min_size,max_size,physics,smooth) {
if(size_by=="betweenness"){
V(my_igraph)$size<-betweenness(my_igraph)
print("betweenness")
} else {
print("no")
V(my_igraph)$size<-degree(my_igraph)
}
V(my_igraph)$size[V(my_igraph)$size<min_size]<-min_size
V(my_igraph)$size[V(my_igraph)$size>max_size]<-max_size
visIgraph(my_igraph, layout=layout, physics=physics, smooth=smooth) %>%
visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.1,
springLength=95,
springConstant=0.05,
damping=0.1,
avoidOverlap=1
),
stabilization=T)
}
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,500,T,T)
plot_commorbidity<-function(my_igraph,layout,size_by,min_size,max_size,physics,smooth) {
if(size_by=="betweenness"){
V(my_igraph)$size<-betweenness(my_igraph)
print("betweenness")
} else {
print("no")
V(my_igraph)$size<-degree(my_igraph)
}
V(my_igraph)$size[V(my_igraph)$size<min_size]<-min_size
V(my_igraph)$size[V(my_igraph)$size>max_size]<-max_size
visIgraph(my_igraph, layout=layout, physics=physics, smooth=smooth) %>%
visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.5,
springLength=95,
springConstant=0.01,
damping=0.1,
avoidOverlap=0.8
),
stabilization=T)
}
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,500,T,T)
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,100,T,T)
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,100,T,T)
plot_commorbidity(m7079.igraph.main,"layout_nicely","betweenness",10,100,T,T)
plot_commorbidity<-function(my_igraph,layout,size_by,min_size,max_size,physics,smooth) {
if(size_by=="betweenness"){
V(my_igraph)$size<-betweenness(my_igraph)
# y = N + ((M-N)*((x-a)/(b-a)))
# N = min_size
# M = max_size
# x = value
# a = min(value)
# b = max(value)
print("betweenness")
} else {
print("no")
V(my_igraph)$size<-degree(my_igraph)
}
V(my_igraph)$size[V(my_igraph)$size<min_size]<-min_size
V(my_igraph)$size[V(my_igraph)$size>max_size]<-max_size
visIgraph(my_igraph, layout=layout, physics=physics, smooth=smooth) %>%
visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.5,
springLength=95,
springConstant=0.01,
damping=0.05,
avoidOverlap=0.8
),
stabilization=F)
}
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,500,T,T)
plot_commorbidity(m7079.igraph.main,"layout_nicely","betweenness",10,800,T,T)
plot_commorbidity<-function(my_igraph,layout,size_by,min_size,max_size,physics,smooth) {
if(size_by=="betweenness"){
#V(my_igraph)$size<-betweenness(my_igraph)
vector<-betweenness(my_igraph)
V(my_igraph)$size<- min_size + ((max_size-min_size)*((vector-min(vector))/(max(vector)-min(vector))))
# y = N + ((M-N)*((x-a)/(b-a)))
# N = min_size
# M = max_size
# x = value
# a = min(value)
# b = max(value)
print("betweenness")
} else {
print("no")
#V(my_igraph)$size<-degree(my_igraph)
vector<-degree(my_igraph)
V(my_igraph)$size<- min_size + ((max_size-min_size)*((vector-min(vector))/(max(vector)-min(vector))))
}
V(my_igraph)$size[V(my_igraph)$size<min_size]<-min_size
V(my_igraph)$size[V(my_igraph)$size>max_size]<-max_size
visIgraph(my_igraph, layout=layout, physics=physics, smooth=smooth) %>%
visPhysics(solver="barnesHut",
barnesHut=list(
gravitationalConstant=-10000,
centralGravity=0.5,
springLength=95,
springConstant=0.01,
damping=0.05,
avoidOverlap=0.8
),
stabilization=F)
}
plot_commorbidity(m5059.igraph.main,"layout_nicely","betweenness",10,100,T,T)
plot_commorbidity(m4049.igraph.main,"layout_nicely","betweenness",10,100,T,T)
plot_commorbidity(m4049.igraph.main,"layout_nicely","degree",10,100,T,T)
plot_commorbidity(m8099.igraph.main,"layout_nicely","degree",10,50,T,T)
plot_commorbidity(f8099.igraph.main,"layout_nicely","degree",10,50,T,T)
plot_commorbidity(m8099.igraph.main,"layout_nicely","degree",10,200,T,T)
setwd("~/Developer/trusty32/code/tweetgenerator")
remove(list=ls())
#Tweet Generator
#Author: Julio Bonis
#install.packages("rtweet")
library(rtweet)
#install.packages("Hmisc")
library(Hmisc)
#install.packages("dplyr")
library(dplyr)
#install.packages("tidytext")
library(tidytext)
library(tidyr)
#install.packages("widyr")
library(widyr)
tokens<-fromJSON(file="tokens.json")
create_token(
app = tokens$app,
consumer_key = tokens$consumer_key,
consumer_secret <- tokens$consumer_secret,
access_token = tokens$access_token,
access_secret = tokens$access_secret)
retrieve_tweets<-function(username){
tweets <- get_timelines(c(username),n=10000, include_rts=FALSE, lan="es")
write_as_csv(tweets,paste0(username,".csv"))
return(tweets)
}
load_tweets<-function(username){
return(read_twitter_csv(paste0(username,".csv")))
}
build_model<-function(username) {
tweets_raw<-load_tweets(username)
text_df<-data.frame(line=1:length(tweets_raw$text),text=tweets_raw$text)
text_df$text<-paste0("aaainicio ",text_df$text, " finzzz")
text_df$text<-gsub("@\\w+", "", text_df$text)
text_df$text<-gsub("https\\:\\/\\/.*\\/.*\\s", "", text_df$text)
syntaxis<<-text_df %>%
unnest_tokens(word,text)
model_words_count <- text_df %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE)
model_bigrams_count <- text_df %>%
unnest_tokens(bigram, text, token = "ngrams", n=2) %>%
count(bigram, sort = TRUE) %>%
separate(bigram,c("word1","word2"),sep=" ")
model<-merge(model_bigrams_count,model_words_count,by.x="word2",by.y="word", suffixes=c(".all",".word2"))
model<-merge(model,model_words_count,by.x="word1",by.y="word")
model$n.word1<-model$n
model$n<-model$n.all/(model$n.word1+model$n.word2)
return(model)
}
get_next_word<-function(myword,word_pairs){
word_pairs <- word_pairs %>%
filter(word1 == tolower(myword))
word_pairs$cum<-cumsum(word_pairs$n)
delme<<-word_pairs
random_next<-word_pairs[which.min(abs(word_pairs$cum-runif(1,0,last(word_pairs$cum)))),]$word2
return(random_next)
}
build_random_tweet<-function(word_pairs_name,sentence_length,tweet_length){
word_pairs<-get(word_pairs_name)
tweet_words<-c("aaainicio")
nwords<-0
swords<-0
while(tail(tweet_words,1)!="finzzz" & nwords<tweet_length) {
new_word<-get_next_word(tail(tweet_words,n=1),word_pairs)
if(new_word=="finzzz"){
tweet_words[length(tweet_words)]<-paste0(tweet_words[length(tweet_words)],". ")
tweet_words<-c(tweet_words,new_word)
} else {
if(nrow(word_pairs[word_pairs$word1=="aaainicio"&word_pairs$word2==new_word,])>0
& swords>sentence_length
){
#la nueva palabra es inicio de tweet
tweet_words[length(tweet_words)]<-paste0(tweet_words[length(tweet_words)],". ")
tweet_words<-c(tweet_words,capitalize(new_word))
swords<-0
} else {
tweet_words<-c(tweet_words,new_word)
swords<-swords+1
}
}
nwords<-nwords+1
}
tweet_words[2]<-capitalize(tweet_words[2])
tweet_words<-tweet_words[-1]
tweet_words<-tweet_words[-length(tweet_words)]
return(paste(tweet_words,collapse=" "))
}
load_tweets("juliomayol")
retrieve_tweets("juliomayol")
juliomayol<-build_model("juliomayol")
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
build_random_tweet("juliomayol",20,20)
retrieve_tweets("rubiu5")
rubiu5<-build_model("rubiu5")
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
build_random_tweet("rubiu5",20,20)
retrieve_tweets("ifilosofia")
ifilosofia<-build_model("ifilosofia")
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,20)
build_random_tweet("ifilosofia",20,4)
build_random_tweet("ifilosofia",20,5)
build_random_tweet("ifilosofia",10,5)
build_random_tweet("ifilosofia",10,6)
build_random_tweet("ifilosofia",10,6)
build_random_tweet("ifilosofia",10,6)
build_random_tweet("ifilosofia",10,10)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
build_random_tweet("ifilosofia",30,30)
retrieve_tweets("perezreverte")
perezreverte<-build_model("perezreverte")
build_random_tweet("perezreverte",30,30)
build_random_tweet("perezreverte",30,30)
build_random_tweet("perezreverte",30,30)
build_random_tweet("perezreverte",30,30)
build_random_tweet("perezreverte",100,30)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",10,10)
build_random_tweet("perezreverte",20,10)
build_random_tweet("perezreverte",20,10)
build_random_tweet("perezreverte",20,10)
build_random_tweet("perezreverte",20,10)
build_random_tweet("perezreverte",20,10)
build_random_tweet("perezreverte",20,10)
build_random_tweet("perezreverte",30,10)
build_random_tweet("perezreverte",30,10)
build_random_tweet("perezreverte",30,10)
build_random_tweet("perezreverte",10,30)
build_random_tweet("perezreverte",6,30)
build_random_tweet("perezreverte",6,30)
build_random_tweet("perezreverte",6,30)
build_random_tweet("perezreverte",6,30)
build_random_tweet("perezreverte",6,30)
build_random_tweet("perezreverte",6,30)
build_random_tweet("perezreverte",30,30)
build_random_tweet("perezreverte",30,10)
build_random_tweet("perezreverte",30,30)
build_random_tweet("perezreverte",30,120)
build_random_tweet("perezreverte",5,20)
build_random_tweet("perezreverte",6,20)
build_random_tweet("perezreverte",7,20)
build_random_tweet("perezreverte",8,20)
build_random_tweet("perezreverte",10,20)
build_random_tweet("perezreverte",20,20)
build_random_tweet("perezreverte",20,20)
build_random_tweet("perezreverte",20,20)
retrieve_tweets("bolsamania")
bolsamania<-build_model("bolsamania")
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
build_random_tweet("bolsamania",20,20)
retrieve_tweets("dlacalle")
dlacalle<-build_model("dlacalle")
build_random_tweet("dlacalle",20,20)
build_random_tweet("dlacalle",20,20)
build_random_tweet("dlacalle",20,20)
build_random_tweet("dlacalle",20,20)
build_random_tweet("dlacalle",20,20)
build_random_tweet("dlacalle",20,20)
retrieve_tweets("publico_es")
publico_es<-build_model("publico_es")
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
build_random_tweet("publico_es",20,20)
retrieve_tweets("marca")
marca<-build_model("marca")
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
build_random_tweet("marca",20,20)
retrieve_tweets("iberia")
iberia<-build_model("iberia")
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
build_random_tweet("iberia",20,20)
retrieve_tweets("empleoytrabajo")
empleoytrabajo<-build_model("empleoytrabajo")
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
build_random_tweet("empleoytrabajo",20,20)
retrieve_tweets("repunomada")
repunomada<-build_model("repunomada")
build_random_tweet("repunomada",20,20)
build_random_tweet("repunomada",20,20)
build_random_tweet("repunomada",20,20)
retrieve_tweets("fllordachs")
fllordachs<-build_model("fllordachs")
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
build_random_tweet("fllordachs",20,20)
retrieve_tweets("rcofinof")
rcofinof<-build_model("rcofinof")
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
build_random_tweet("rcofinof",20,20)
retrieve_tweets("manyez")
manyez<-build_model("manyez")
build_random_tweet("manyez",20,20)
build_random_tweet("manyez",20,20)
build_random_tweet("manyez",20,20)
build_random_tweet("manyez",20,20)
build_random_tweet("manyez",20,20)
shiny::runApp()
setwd("~/Developer/trusty32/code/tweetgenerator")
runApp()
runApp()
remove(list=ls())
